[
  {
    "name": "Button",
    "path": "src\\components\\Button\\Button.tsx",
    "imports": [
      "class-variance-authority",
      "react",
      "@/lib/utils"
    ],
    "code": "import { cva, type VariantProps } from \"class-variance-authority\";\r\nimport * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst variantsConfig = {\r\n  variant: {\r\n    fill: \"bg-primary text-white\",\r\n    outline:\r\n      \"border border-primary text-primary hover:bg-primary hover:text-white\",\r\n    sub: \"bg-greyLight text-text border border-greyBorder\",\r\n  },\r\n  size: {\r\n    small: \"px-4 py-2 text-sm font-semibold rounded w-fit\",\r\n    big: \"rounded-md px-6 py-3 font-semibold text-base w-fit\",\r\n    full: \"rounded-xl w-full px-8 py-4 text-lg font-bold\",\r\n  },\r\n  animate: {\r\n    on: \"active:scale-95 transition\",\r\n    off: \"\",\r\n  },\r\n};\r\n\r\nconst variants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: variantsConfig,\r\n    defaultVariants: {\r\n      variant: \"fill\",\r\n      size: \"small\",\r\n      animate: \"on\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof variants> {}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, ...props }, ref) => {\r\n    return (\r\n      <button\r\n        className={cn(variants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport default Button;\r\nexport { variantsConfig };\r\n"
  },
  {
    "name": "Select",
    "path": "src\\components\\Select\\Select.tsx",
    "imports": [
      "class-variance-authority",
      "react",
      "@/lib/utils",
      "../Button/Button"
    ],
    "code": "\"use client\";\r\n\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport Button from \"../Button/Button\";\r\n\r\nconst variantsConfig = {\r\n  size: {\r\n    small: \"\",\r\n    big: \"\",\r\n  },\r\n  divider: {\r\n    on: \"divide-solid divide-transparent divide-x-2\",\r\n    off: \"\",\r\n  },\r\n};\r\n\r\nconst variants = cva(\"inline-flex rounded-md shadow-sm overflow-clip\", {\r\n  variants: variantsConfig,\r\n  defaultVariants: {\r\n    size: \"small\",\r\n    divider: \"on\",\r\n  },\r\n});\r\n\r\nexport interface SelectProps\r\n  extends Omit<\r\n      React.SelectHTMLAttributes<HTMLSelectElement>,\r\n      \"onChange\" | \"size\"\r\n    >,\r\n    VariantProps<typeof variants> {\r\n  options: string[];\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nconst Select = React.forwardRef<HTMLSelectElement, SelectProps>(\r\n  ({ className, size, divider, value, options, onChange, ...props }, ref) => {\r\n    return (\r\n      <div>\r\n        <select\r\n          value={value}\r\n          className=\"hidden\"\r\n          ref={ref}\r\n          onChange={(e) => onChange(e.target.value)}\r\n          {...props}\r\n        >\r\n          {options.map((option) => (\r\n            <option key={option} value={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <div\r\n          className={cn(variants({ size, divider, className }))}\r\n          role=\"group\"\r\n        >\r\n          {options.map((option) => (\r\n            <div key={option}>\r\n              <Button\r\n                variant={option === value ? \"fill\" : \"sub\"}\r\n                size={size}\r\n                onClick={() => onChange(option)}\r\n                className={`rounded-none active:scale-100 border-none`}\r\n              >\r\n                {option}\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\nSelect.displayName = \"Select\";\r\n\r\nexport default Select;\r\nexport { variantsConfig };\r\n"
  }
]